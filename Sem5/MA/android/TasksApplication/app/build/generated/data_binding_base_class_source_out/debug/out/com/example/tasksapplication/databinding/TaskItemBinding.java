// Generated by view binder compiler. Do not edit!
package com.example.tasksapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import com.example.tasksapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class TaskItemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final ImageButton buttonDelete;

  @NonNull
  public final View divider;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final CardView taskCard;

  @NonNull
  public final TextView textViewDeadline;

  @NonNull
  public final TextView textViewDeadlineDate;

  @NonNull
  public final TextView textViewDescription;

  @NonNull
  public final TextView textViewDomain;

  @NonNull
  public final TextView textViewPriority;

  @NonNull
  public final TextView textViewProgress;

  @NonNull
  public final TextView textViewStatus;

  @NonNull
  public final TextView textViewTimeCreated;

  @NonNull
  public final TextView textViewTimeCreatedValue;

  @NonNull
  public final TextView textViewTitle;

  private TaskItemBinding(@NonNull CardView rootView, @NonNull ImageButton buttonDelete,
      @NonNull View divider, @NonNull ProgressBar progressBar, @NonNull CardView taskCard,
      @NonNull TextView textViewDeadline, @NonNull TextView textViewDeadlineDate,
      @NonNull TextView textViewDescription, @NonNull TextView textViewDomain,
      @NonNull TextView textViewPriority, @NonNull TextView textViewProgress,
      @NonNull TextView textViewStatus, @NonNull TextView textViewTimeCreated,
      @NonNull TextView textViewTimeCreatedValue, @NonNull TextView textViewTitle) {
    this.rootView = rootView;
    this.buttonDelete = buttonDelete;
    this.divider = divider;
    this.progressBar = progressBar;
    this.taskCard = taskCard;
    this.textViewDeadline = textViewDeadline;
    this.textViewDeadlineDate = textViewDeadlineDate;
    this.textViewDescription = textViewDescription;
    this.textViewDomain = textViewDomain;
    this.textViewPriority = textViewPriority;
    this.textViewProgress = textViewProgress;
    this.textViewStatus = textViewStatus;
    this.textViewTimeCreated = textViewTimeCreated;
    this.textViewTimeCreatedValue = textViewTimeCreatedValue;
    this.textViewTitle = textViewTitle;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static TaskItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static TaskItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.task_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static TaskItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button_delete;
      ImageButton buttonDelete = rootView.findViewById(id);
      if (buttonDelete == null) {
        break missingId;
      }

      id = R.id.divider;
      View divider = rootView.findViewById(id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = rootView.findViewById(id);
      if (progressBar == null) {
        break missingId;
      }

      CardView taskCard = (CardView) rootView;

      id = R.id.text_view_deadline;
      TextView textViewDeadline = rootView.findViewById(id);
      if (textViewDeadline == null) {
        break missingId;
      }

      id = R.id.text_view_deadline_date;
      TextView textViewDeadlineDate = rootView.findViewById(id);
      if (textViewDeadlineDate == null) {
        break missingId;
      }

      id = R.id.text_view_description;
      TextView textViewDescription = rootView.findViewById(id);
      if (textViewDescription == null) {
        break missingId;
      }

      id = R.id.text_view_domain;
      TextView textViewDomain = rootView.findViewById(id);
      if (textViewDomain == null) {
        break missingId;
      }

      id = R.id.text_view_priority;
      TextView textViewPriority = rootView.findViewById(id);
      if (textViewPriority == null) {
        break missingId;
      }

      id = R.id.text_view_progress;
      TextView textViewProgress = rootView.findViewById(id);
      if (textViewProgress == null) {
        break missingId;
      }

      id = R.id.text_view_status;
      TextView textViewStatus = rootView.findViewById(id);
      if (textViewStatus == null) {
        break missingId;
      }

      id = R.id.text_view_time_created;
      TextView textViewTimeCreated = rootView.findViewById(id);
      if (textViewTimeCreated == null) {
        break missingId;
      }

      id = R.id.text_view_time_created_value;
      TextView textViewTimeCreatedValue = rootView.findViewById(id);
      if (textViewTimeCreatedValue == null) {
        break missingId;
      }

      id = R.id.text_view_title;
      TextView textViewTitle = rootView.findViewById(id);
      if (textViewTitle == null) {
        break missingId;
      }

      return new TaskItemBinding((CardView) rootView, buttonDelete, divider, progressBar, taskCard,
          textViewDeadline, textViewDeadlineDate, textViewDescription, textViewDomain,
          textViewPriority, textViewProgress, textViewStatus, textViewTimeCreated,
          textViewTimeCreatedValue, textViewTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
